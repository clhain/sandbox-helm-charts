# clusterIngressIP is the IP address which is to be assigned to the nginx ingress controller.
clusterIngressIP:
# clusterDomain is the domain under which all resources are deployed. e.g. example.com
clusterDomain: localtest.me
# Disable all certificate generation and https auth callbacks (not recommended)
clusterTLSInsecure: false
# Enable a local Dex IDP with static admin account for oauth protected services.
clusterLocalAuth: true

# letsEncryptContactEmail is the email address to use when registering let's encrypt certs - required if clusterTLSInsecure=false
letsEncryptContactEmail:

# oidcIssuerURL is the OIDC Issuer URL to be used with oauth2 proxy - required if clusterLocalAuth=false
oidcIssuerURL: ""
# oidcPermittedEmailDomains is the set of email domains allowed to access resources behind the oauth2 proxy.
oidcPermittedEmailDomains: "*"
# oidcClientID is the OIDC Client's ID to be used with oauth2 proxy.
oidcClientID: ""
# oidcClientSecret is the OIDC Client's Secret to be used with oauth2 proxy.
oidcClientSecret: ""
# Admin Pass overrides the default admin account for use with local dex authenticator
adminPass: ""
# Cookie Secret to use with Oauth2 Proxy
cookieSecret: ""

# Enable / disable the Oauth2 Proxy virtual server
enableVirtualServer: true

# Namespace to fetch existing OIDC secrets from
authSecretNamespace: argocd
# Secret name to fetch existing OIDC secrets from
authSecretName: oauth-secret

# Deploy auth secrets for oauthProxy
oauthProxySecretEnable: true
oauthProxyNamespace: oauth-proxy

# Deploy 'cluster-services' project for the apps specified below.
deployArgoProject: true

# Default settings which apply to all apps unless overridden.
default:
  app:
    # Enable the autosync Argocd Application property.
    enableAutoSync: true
    # Enable auto prune Argocd Application property.
    autoSyncPrune: true
    # Enable self-heal Argocd Application property.
    selfHeal: true
    # The Argocd Application sync wave annotation for the app.
    syncWave: "10"
    # Additional Argocd Application syncOptions to include by default.
    syncOptions:
      - CreateNamespace=true
    # Where argocd should deploy the application source.
    destination:
      namespace: null
      server: https://kubernetes.default.svc
    # The Argocd Application project name.
    project: cluster-services
    # Argocd Application source parameters.
    source:
      # Argocd Application path parameter.
      path: null
      # Argocd Application repoURL parameter.
      repoURL: https://github.com/clhain/sandbox.git
      # Argocd Application targetRevision parameter.
      targetRevision: HEAD
    # Argocd Application extra fields to include.
    extraFields: |
      ignoreDifferences:
      - group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        jsonPointers:
        - /metadata/annotations
apps:
  # Parameters for the Argo Virtual Server ArgoCD Application.
  argo-virtual-server:
    enabled: true
    destination:
      namespace: argocd
    source:
      path: services/argo-virtual-server
      helm:
        params:
          # The domain of the cluster installation e.g. example.com
          clusterDomain: "{{ .Values.clusterDomain }}"
          clusterTLSInsecure: "{{ .Values.clusterTLSInsecure }}"
    syncWave: "5"

  # Parameters for the cert-manager ArgoCD Application.
  cert-manager:
    enabled: true
    destination:
      namespace: cert-manager
    source:
      path: services/cert-manager
      helm:
        # Installation specific Cert Manager params to pass.
        params:
          # The required contact email address for the letsEncrypt Issuer.
          letsEncryptIssuer.contactEmail: "{{ .Values.letsEncryptContactEmail }}"
          clusterTLSInsecure: "{{ .Values.clusterTLSInsecure }}"
    syncWave: "1"

  # Parameters for the OPA gatekeeper ArgoCD Application.
  gatekeeper:
    enabled: true
    destination:
      namespace: gatekeeper
    source:
      path: services/gatekeeper
    syncWave: "2"

  # Parameters for the grafana ArgoCD Application.
  grafana:
    enabled: true
    destination:
      namespace: grafana
    source:
      path: services/grafana
      helm:
        params:
          # The domain of the cluster installation e.g. example.com
          clusterDomain: "{{ .Values.clusterDomain }}"
          clusterTLSInsecure: "{{ .Values.clusterTLSInsecure }}"
    syncWave: "6"

  # Parameters for the loki ArgoCD Application.
  loki:
    enabled: true
    destination:
      namespace: loki
    source:
      path: services/loki
    syncWave: "5"

  # Parameters for the nginx-ingress ArgoCD Application.
  nginx-ingress:
    enabled: true
    destination:
      namespace: nginx-ingress
    source:
      path: services/nginx-ingress
      helm:
        # Installation specific Nginx Ingress params to pass.
        params:
          # The nginx ingress controller GCP load balancer type annotation.
          nginx-ingress.controller.service.annoations.cloud\.google\.com/load-balancer-type: "External"
          # The IP of the loadbalancer to use.
          nginx-ingress.controller.service.loadBalancerIP: "{{ .Values.clusterIngressIP }}"
    syncWave: "4"

  # Parameters for the nginx-mesh ArgoCD Application.
  nginx-mesh:
    enabled: true
    destination:
      namespace: nginx-mesh
    source:
      path: services/nginx-mesh
    syncWave: "3"

  # Parameters for the oauth-proxy ArgoCD Application.
  oauth-proxy:
    enabled: true
    destination:
      namespace: oauth-proxy
    source:
      path: services/oauth-proxy
      helm:
        # Installation specific Oauth2 Proxy params to pass.
        params:
          # The domain of the cluster installation e.g. example.com
          clusterDomain: "{{ .Values.clusterDomain }}"
          clusterTLSInsecure: "{{ .Values.clusterTLSInsecure }}"
          clusterLocalAuth: "{{ .Values.clusterLocalAuth }}"
          oidcIssuerURL: "{{ .Values.oidcIssuerURL }}"
          oidcPermittedEmailDomains: "{{ .Values.oidcPermittedEmailDomains }}"
    syncWave: "5"

  # Parameters for the cert-manager ArgoCD Application.
  opentelemetry-operator:
    enabled: true
    destination:
      namespace: opentelemetry-operator
    source:
      path: services/opentelemetry-operator
    syncWave: "2"

  # Parameters for the prometheus-operator ArgoCD Application.
  prometheus-operator:
    enabled: true
    destination:
      namespace: prometheus-operator
    source:
      path: services/prometheus-operator
      extraSourceFields: |
        helm:
          skipCrds: true
    syncWave: "2"

  # Parameters for the prometheus-operator-crds ArgoCD Application.
  prometheus-operator-crds:
    enabled: true
    destination:
      namespace: prometheus-operator
    source:
      repoURL: https://github.com/prometheus-community/helm-charts.git
      path: charts/kube-prometheus-stack/crds/
      targetRevision: kube-prometheus-stack-39.9.0
      extraSourceFields: |
        directory:
          recurse: true
    syncOptions:
      - CreateNamespace=true
      - Replace=true
    syncWave: "1"

  # Parameters for the Sealed Secrets ArgoCD Application.
  sealed-secrets:
    enabled: true
    destination:
      namespace: sealed-secrets
    source:
      path: services/sealed-secrets
    syncWave: "2"

  # Parameters for the tempo ArgoCD Application.
  tempo:
    enabled: true
    destination:
      namespace: tempo
    source:
      path: services/tempo
    syncWave: "5"
