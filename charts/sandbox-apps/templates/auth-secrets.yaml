{{- if .Values.oauthProxySecret.enable }}
{{- if .Values.oauthProxySecret.createNamespace }}
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: {{ .Values.oauthProxySecret.namespace | required (printf "No oauthNamespace specified") }}
  name: {{ .Values.oauthProxySecret.namespace | required (printf "No oauthNamespace specified") }}
{{- end }}

{{- $secretObj := (lookup "v1" "Secret" .Values.oauthProxySecret.namespace .Values.oauthProxySecret.secretName) | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
{{- $cookieSecret := (get $secretData "cookie-secret") | default (randAlphaNum 32 | b64enc | substr 0 32) }}
{{- $clientSecret := (get $secretData "client-secret") | default (randAlphaNum 32 | b64enc | substr 0 32) }}
{{- $clientId := (get $secretData "client-id") | default (randAlphaNum 32 | b64enc | substr 0 32) }}
{{- $adminPass := (get $secretData "admin-password") | default (randAlphaNum 32 | b64enc | substr 0 32) }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.oauthProxySecret.secretName | required (printf "No oauthProxySecret.secretName specified") }}
  namespace: {{ .Values.oauthProxySecret.namespace | required (printf "No oauthNamespace specified") }}
stringData:
  client-id: "{{ include "render-value" ( dict "value" .Values.oauthProxySecret.clientID  "context" $) | default ($clientId | b64dec) }}"
  client-secret: "{{ include "render-value" ( dict "value" .Values.oauthProxySecret.clientSecret  "context" $) | default ($clientSecret | b64dec) }}"
  cookie-secret: "{{ .Values.oauthProxySecret.cookieSecret | default ($cookieSecret | b64dec) }}"
  admin-password: "{{ include "render-value" ( dict "value" .Values.oauthProxySecret.adminPass  "context" $) | default ($adminPass | b64dec) }}"

{{- if .Values.clusterLocalAuth }}
---
apiVersion: v1
kind: Secret
metadata:
  name: dex-config-secret
  namespace: {{ .Values.oauthProxySecret.namespace | required (printf "No oauthNamespace specified") }}
stringData:
  adminPw:
  config.yaml: |
    issuer: {{ if .Values.clusterTLSInsecure }}http{{ else }}https{{ end }}://dex.{{ .Values.clusterDomain }}/dex
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      http: 0.0.0.0:5556
      allowedOrigins: ['*']
    connectors:
    - type: mockCallback
      id: mock
      name: Example

    oauth2:
      skipApprovalScreen: false
      alwaysShowLoginScreen: true
    staticClients:
    - id: {{ $clientId }}
      redirectURIs:
      - '{{ if .Values.clusterTLSInsecure }}http{{ else }}https{{ end }}://auth.{{ .Values.clusterDomain }}/oauth2/callback'
      name: 'OAuth2 Proxy'
      secret: {{ include "render-value" ( dict "value" .Values.oauthProxySecret.clientSecret  "context" $) | default ($clientSecret | b64dec) }}
    enablePasswordDB: true
    staticPasswords:
    - email: "admin@example.com"
      hash: "{{ $adminPass | b64dec | bcrypt }}"
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
    logger:
      level: debug
{{- end }}

{{- end }}


